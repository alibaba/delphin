// Code generated by MockGen. DO NOT EDIT.
// Source: morphling_client.go

// Package mock_morphlingclient is a generated GoMock package.
package mock_morphlingclient

import (
	v1alpha1 "github.com/alibaba/morphling/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// InjectClient mocks base method
func (m *MockClient) InjectClient(c client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectClient", c)
}

// InjectClient indicates an expected call of InjectClient
func (mr *MockClientMockRecorder) InjectClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectClient", reflect.TypeOf((*MockClient)(nil).InjectClient), c)
}

// GetClient mocks base method
func (m *MockClient) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClient)(nil).GetClient))
}

// GetProfilingExperimentList mocks base method
func (m *MockClient) GetProfilingExperimentList(namespace ...string) (*v1alpha1.ProfilingExperimentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfilingExperimentList", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ProfilingExperimentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilingExperimentList indicates an expected call of GetProfilingExperimentList
func (mr *MockClientMockRecorder) GetProfilingExperimentList(namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilingExperimentList", reflect.TypeOf((*MockClient)(nil).GetProfilingExperimentList), namespace...)
}

// CreateExperiment mocks base method
func (m *MockClient) CreateExperiment(experiment *v1alpha1.ProfilingExperiment, namespace ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{experiment}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExperiment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExperiment indicates an expected call of CreateExperiment
func (mr *MockClientMockRecorder) CreateExperiment(experiment interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{experiment}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperiment", reflect.TypeOf((*MockClient)(nil).CreateExperiment), varargs...)
}

// CreateTrial mocks base method
func (m *MockClient) CreateTrial(trial *v1alpha1.Trial, namespace ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{trial}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrial", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrial indicates an expected call of CreateTrial
func (mr *MockClientMockRecorder) CreateTrial(trial interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{trial}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrial", reflect.TypeOf((*MockClient)(nil).CreateTrial), varargs...)
}

// UpdateExperiment mocks base method
func (m *MockClient) UpdateExperiment(experiment *v1alpha1.ProfilingExperiment, namespace ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{experiment}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExperiment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExperiment indicates an expected call of UpdateExperiment
func (mr *MockClientMockRecorder) UpdateExperiment(experiment interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{experiment}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperiment", reflect.TypeOf((*MockClient)(nil).UpdateExperiment), varargs...)
}

// DeleteExperiment mocks base method
func (m *MockClient) DeleteExperiment(experiment *v1alpha1.ProfilingExperiment, namespace ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{experiment}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExperiment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExperiment indicates an expected call of DeleteExperiment
func (mr *MockClientMockRecorder) DeleteExperiment(experiment interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{experiment}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperiment", reflect.TypeOf((*MockClient)(nil).DeleteExperiment), varargs...)
}

// GetExperiment mocks base method
func (m *MockClient) GetExperiment(name string, namespace ...string) (*v1alpha1.ProfilingExperiment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperiment", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ProfilingExperiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiment indicates an expected call of GetExperiment
func (mr *MockClientMockRecorder) GetExperiment(name interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiment", reflect.TypeOf((*MockClient)(nil).GetExperiment), varargs...)
}

// GetConfigMap mocks base method
func (m *MockClient) GetConfigMap(name string, namespace ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigMap", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap
func (mr *MockClientMockRecorder) GetConfigMap(name interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockClient)(nil).GetConfigMap), varargs...)
}

// GetTrial mocks base method
func (m *MockClient) GetTrial(name string, namespace ...string) (*v1alpha1.Trial, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrial", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Trial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrial indicates an expected call of GetTrial
func (mr *MockClientMockRecorder) GetTrial(name interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrial", reflect.TypeOf((*MockClient)(nil).GetTrial), varargs...)
}

// GetTrialList mocks base method
func (m *MockClient) GetTrialList(name string, namespace ...string) (*v1alpha1.TrialList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrialList", varargs...)
	ret0, _ := ret[0].(*v1alpha1.TrialList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialList indicates an expected call of GetTrialList
func (mr *MockClientMockRecorder) GetTrialList(name interface{}, namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, namespace...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialList", reflect.TypeOf((*MockClient)(nil).GetTrialList), varargs...)
}

// GetTrialTemplates mocks base method
func (m *MockClient) GetTrialTemplates(namespace ...string) (*v1.ConfigMapList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range namespace {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrialTemplates", varargs...)
	ret0, _ := ret[0].(*v1.ConfigMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialTemplates indicates an expected call of GetTrialTemplates
func (mr *MockClientMockRecorder) GetTrialTemplates(namespace ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialTemplates", reflect.TypeOf((*MockClient)(nil).GetTrialTemplates), namespace...)
}

// UpdateConfigMap mocks base method
func (m *MockClient) UpdateConfigMap(newConfigMap *v1.ConfigMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigMap", newConfigMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfigMap indicates an expected call of UpdateConfigMap
func (mr *MockClientMockRecorder) UpdateConfigMap(newConfigMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigMap", reflect.TypeOf((*MockClient)(nil).UpdateConfigMap), newConfigMap)
}

// GetNamespaceList mocks base method
func (m *MockClient) GetNamespaceList() (*v1.NamespaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceList")
	ret0, _ := ret[0].(*v1.NamespaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceList indicates an expected call of GetNamespaceList
func (mr *MockClientMockRecorder) GetNamespaceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceList", reflect.TypeOf((*MockClient)(nil).GetNamespaceList))
}
