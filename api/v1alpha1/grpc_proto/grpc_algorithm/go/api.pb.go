// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.13.0
// source: api.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParameterType int32

const (
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

// Enum value maps for ParameterType.
var (
	ParameterType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "DOUBLE",
		2: "INT",
		3: "DISCRETE",
		4: "CATEGORICAL",
	}
	ParameterType_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"DOUBLE":       1,
		"INT":          2,
		"DISCRETE":     3,
		"CATEGORICAL":  4,
	}
)

func (x ParameterType) Enum() *ParameterType {
	p := new(ParameterType)
	*p = x
	return p
}

func (x ParameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (ParameterType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x ParameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterType.Descriptor instead.
func (ParameterType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ParameterAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValues []*KeyValue `protobuf:"bytes,1,rep,name=key_values,json=keyValues,proto3" json:"key_values,omitempty"`
}

func (x *ParameterAssignments) Reset() {
	*x = ParameterAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterAssignments) ProtoMessage() {}

func (x *ParameterAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterAssignments.ProtoReflect.Descriptor instead.
func (*ParameterAssignments) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *ParameterAssignments) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type TrialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterAssignments []*KeyValue `protobuf:"bytes,1,rep,name=parameter_assignments,json=parameterAssignments,proto3" json:"parameter_assignments,omitempty"`
	ObjectValue          float32     `protobuf:"fixed32,2,opt,name=object_value,json=objectValue,proto3" json:"object_value,omitempty"` //
}

func (x *TrialResult) Reset() {
	*x = TrialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialResult) ProtoMessage() {}

func (x *TrialResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialResult.ProtoReflect.Descriptor instead.
func (*TrialResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *TrialResult) GetParameterAssignments() []*KeyValue {
	if x != nil {
		return x.ParameterAssignments
	}
	return nil
}

func (x *TrialResult) GetObjectValue() float32 {
	if x != nil {
		return x.ObjectValue
	}
	return 0
}

type ParameterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParameterType ParameterType `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,proto3,enum=api.suggestion.ParameterType" json:"parameter_type,omitempty"`
	FeasibleSpace []string      `protobuf:"bytes,3,rep,name=feasible_space,json=feasibleSpace,proto3" json:"feasible_space,omitempty"`
}

func (x *ParameterSpec) Reset() {
	*x = ParameterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterSpec) ProtoMessage() {}

func (x *ParameterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterSpec.ProtoReflect.Descriptor instead.
func (*ParameterSpec) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ParameterSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterSpec) GetParameterType() ParameterType {
	if x != nil {
		return x.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (x *ParameterSpec) GetFeasibleSpace() []string {
	if x != nil {
		return x.FeasibleSpace
	}
	return nil
}

type SamplingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFirstRequest          bool             `protobuf:"varint,1,opt,name=is_first_request,json=isFirstRequest,proto3" json:"is_first_request,omitempty"`
	AlgorithmName           string           `protobuf:"bytes,2,opt,name=algorithm_name,json=algorithmName,proto3" json:"algorithm_name,omitempty"`
	AlgorithmExtraSettings  []*KeyValue      `protobuf:"bytes,3,rep,name=algorithm_extra_settings,json=algorithmExtraSettings,proto3" json:"algorithm_extra_settings,omitempty"`
	SamplingNumberSpecified int32            `protobuf:"varint,4,opt,name=sampling_number_specified,json=samplingNumberSpecified,proto3" json:"sampling_number_specified,omitempty"`
	RequiredSampling        int32            `protobuf:"varint,6,opt,name=required_sampling,json=requiredSampling,proto3" json:"required_sampling,omitempty"`
	IsMaximize              bool             `protobuf:"varint,7,opt,name=is_maximize,json=isMaximize,proto3" json:"is_maximize,omitempty"`
	ExistingResults         []*TrialResult   `protobuf:"bytes,8,rep,name=existing_results,json=existingResults,proto3" json:"existing_results,omitempty"`
	Parameters              []*ParameterSpec `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *SamplingRequest) Reset() {
	*x = SamplingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingRequest) ProtoMessage() {}

func (x *SamplingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingRequest.ProtoReflect.Descriptor instead.
func (*SamplingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *SamplingRequest) GetIsFirstRequest() bool {
	if x != nil {
		return x.IsFirstRequest
	}
	return false
}

func (x *SamplingRequest) GetAlgorithmName() string {
	if x != nil {
		return x.AlgorithmName
	}
	return ""
}

func (x *SamplingRequest) GetAlgorithmExtraSettings() []*KeyValue {
	if x != nil {
		return x.AlgorithmExtraSettings
	}
	return nil
}

func (x *SamplingRequest) GetSamplingNumberSpecified() int32 {
	if x != nil {
		return x.SamplingNumberSpecified
	}
	return 0
}

func (x *SamplingRequest) GetRequiredSampling() int32 {
	if x != nil {
		return x.RequiredSampling
	}
	return 0
}

func (x *SamplingRequest) GetIsMaximize() bool {
	if x != nil {
		return x.IsMaximize
	}
	return false
}

func (x *SamplingRequest) GetExistingResults() []*TrialResult {
	if x != nil {
		return x.ExistingResults
	}
	return nil
}

func (x *SamplingRequest) GetParameters() []*ParameterSpec {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type SamplingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignmentsSet []*ParameterAssignments `protobuf:"bytes,1,rep,name=assignments_set,json=assignmentsSet,proto3" json:"assignments_set,omitempty"`
}

func (x *SamplingResponse) Reset() {
	*x = SamplingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingResponse) ProtoMessage() {}

func (x *SamplingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingResponse.ProtoReflect.Descriptor instead.
func (*SamplingResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *SamplingResponse) GetAssignmentsSet() []*ParameterAssignments {
	if x != nil {
		return x.AssignmentsSet
	}
	return nil
}

type SamplingValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgorithmName           string           `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName,proto3" json:"algorithm_name,omitempty"`
	AlgorithmExtraSettings  []*KeyValue      `protobuf:"bytes,2,rep,name=algorithm_extra_settings,json=algorithmExtraSettings,proto3" json:"algorithm_extra_settings,omitempty"`
	SamplingNumberSpecified int32            `protobuf:"varint,3,opt,name=sampling_number_specified,json=samplingNumberSpecified,proto3" json:"sampling_number_specified,omitempty"`
	IsMaximize              bool             `protobuf:"varint,4,opt,name=is_maximize,json=isMaximize,proto3" json:"is_maximize,omitempty"`
	Parameters              []*ParameterSpec `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *SamplingValidationRequest) Reset() {
	*x = SamplingValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingValidationRequest) ProtoMessage() {}

func (x *SamplingValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingValidationRequest.ProtoReflect.Descriptor instead.
func (*SamplingValidationRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *SamplingValidationRequest) GetAlgorithmName() string {
	if x != nil {
		return x.AlgorithmName
	}
	return ""
}

func (x *SamplingValidationRequest) GetAlgorithmExtraSettings() []*KeyValue {
	if x != nil {
		return x.AlgorithmExtraSettings
	}
	return nil
}

func (x *SamplingValidationRequest) GetSamplingNumberSpecified() int32 {
	if x != nil {
		return x.SamplingNumberSpecified
	}
	return 0
}

func (x *SamplingValidationRequest) GetIsMaximize() bool {
	if x != nil {
		return x.IsMaximize
	}
	return false
}

func (x *SamplingValidationRequest) GetParameters() []*ParameterSpec {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type SamplingValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SamplingValidationResponse) Reset() {
	*x = SamplingValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingValidationResponse) ProtoMessage() {}

func (x *SamplingValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingValidationResponse.ProtoReflect.Descriptor instead.
func (*SamplingValidationResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4f, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x7f, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4d, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x61,
	0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65,
	0x74, 0x22, 0xb2, 0x02, 0x0a, 0x19, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x55, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x32, 0xd5, 0x01, 0x0a, 0x0a,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x72, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_proto_goTypes = []interface{}{
	(ParameterType)(0),                 // 0: api.suggestion.ParameterType
	(*KeyValue)(nil),                   // 1: api.suggestion.KeyValue
	(*ParameterAssignments)(nil),       // 2: api.suggestion.ParameterAssignments
	(*TrialResult)(nil),                // 3: api.suggestion.TrialResult
	(*ParameterSpec)(nil),              // 4: api.suggestion.ParameterSpec
	(*SamplingRequest)(nil),            // 5: api.suggestion.SamplingRequest
	(*SamplingResponse)(nil),           // 6: api.suggestion.SamplingResponse
	(*SamplingValidationRequest)(nil),  // 7: api.suggestion.SamplingValidationRequest
	(*SamplingValidationResponse)(nil), // 8: api.suggestion.SamplingValidationResponse
}
var file_api_proto_depIdxs = []int32{
	1,  // 0: api.suggestion.ParameterAssignments.key_values:type_name -> api.suggestion.KeyValue
	1,  // 1: api.suggestion.TrialResult.parameter_assignments:type_name -> api.suggestion.KeyValue
	0,  // 2: api.suggestion.ParameterSpec.parameter_type:type_name -> api.suggestion.ParameterType
	1,  // 3: api.suggestion.SamplingRequest.algorithm_extra_settings:type_name -> api.suggestion.KeyValue
	3,  // 4: api.suggestion.SamplingRequest.existing_results:type_name -> api.suggestion.TrialResult
	4,  // 5: api.suggestion.SamplingRequest.parameters:type_name -> api.suggestion.ParameterSpec
	2,  // 6: api.suggestion.SamplingResponse.assignments_set:type_name -> api.suggestion.ParameterAssignments
	1,  // 7: api.suggestion.SamplingValidationRequest.algorithm_extra_settings:type_name -> api.suggestion.KeyValue
	4,  // 8: api.suggestion.SamplingValidationRequest.parameters:type_name -> api.suggestion.ParameterSpec
	5,  // 9: api.suggestion.Suggestion.GetSuggestions:input_type -> api.suggestion.SamplingRequest
	7,  // 10: api.suggestion.Suggestion.ValidateAlgorithmSettings:input_type -> api.suggestion.SamplingValidationRequest
	6,  // 11: api.suggestion.Suggestion.GetSuggestions:output_type -> api.suggestion.SamplingResponse
	8,  // 12: api.suggestion.Suggestion.ValidateAlgorithmSettings:output_type -> api.suggestion.SamplingValidationResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SuggestionClient is the client API for Suggestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuggestionClient interface {
	GetSuggestions(ctx context.Context, in *SamplingRequest, opts ...grpc.CallOption) (*SamplingResponse, error)
	ValidateAlgorithmSettings(ctx context.Context, in *SamplingValidationRequest, opts ...grpc.CallOption) (*SamplingValidationResponse, error)
}

type suggestionClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestionClient(cc grpc.ClientConnInterface) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GetSuggestions(ctx context.Context, in *SamplingRequest, opts ...grpc.CallOption) (*SamplingResponse, error) {
	out := new(SamplingResponse)
	err := c.cc.Invoke(ctx, "/api.suggestion.Suggestion/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) ValidateAlgorithmSettings(ctx context.Context, in *SamplingValidationRequest, opts ...grpc.CallOption) (*SamplingValidationResponse, error) {
	out := new(SamplingValidationResponse)
	err := c.cc.Invoke(ctx, "/api.suggestion.Suggestion/ValidateAlgorithmSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestionServer is the server API for Suggestion service.
type SuggestionServer interface {
	GetSuggestions(context.Context, *SamplingRequest) (*SamplingResponse, error)
	ValidateAlgorithmSettings(context.Context, *SamplingValidationRequest) (*SamplingValidationResponse, error)
}

// UnimplementedSuggestionServer can be embedded to have forward compatible implementations.
type UnimplementedSuggestionServer struct {
}

func (*UnimplementedSuggestionServer) GetSuggestions(context.Context, *SamplingRequest) (*SamplingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (*UnimplementedSuggestionServer) ValidateAlgorithmSettings(context.Context, *SamplingValidationRequest) (*SamplingValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAlgorithmSettings not implemented")
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.suggestion.Suggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GetSuggestions(ctx, req.(*SamplingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_ValidateAlgorithmSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplingValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.suggestion.Suggestion/ValidateAlgorithmSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, req.(*SamplingValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.suggestion.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _Suggestion_GetSuggestions_Handler,
		},
		{
			MethodName: "ValidateAlgorithmSettings",
			Handler:    _Suggestion_ValidateAlgorithmSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
