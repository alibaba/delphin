# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import api_pb2 as api__pb2


class ManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportObservationLog = channel.unary_unary(
                '/api.v1alpha1.manager.Manager/ReportObservationLog',
                request_serializer=api__pb2.ReportObservationLogRequest.SerializeToString,
                response_deserializer=api__pb2.ReportObservationLogReply.FromString,
                )
        self.GetObservationLog = channel.unary_unary(
                '/api.v1alpha1.manager.Manager/GetObservationLog',
                request_serializer=api__pb2.GetObservationLogRequest.SerializeToString,
                response_deserializer=api__pb2.GetObservationLogReply.FromString,
                )
        self.DeleteObservationLog = channel.unary_unary(
                '/api.v1alpha1.manager.Manager/DeleteObservationLog',
                request_serializer=api__pb2.DeleteObservationLogRequest.SerializeToString,
                response_deserializer=api__pb2.DeleteObservationLogReply.FromString,
                )


class ManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReportObservationLog(self, request, context):
        """*
        Report a log of Observations for a Trial.
        The log consists of timestamp and value of metric.
        Morphling store every log of metrics.
        You can see accuracy curve or other metric logs on UI.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObservationLog(self, request, context):
        """*
        Get all log of Observations for a Trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteObservationLog(self, request, context):
        """*
        Delete all log of Observations for a Trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportObservationLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportObservationLog,
                    request_deserializer=api__pb2.ReportObservationLogRequest.FromString,
                    response_serializer=api__pb2.ReportObservationLogReply.SerializeToString,
            ),
            'GetObservationLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObservationLog,
                    request_deserializer=api__pb2.GetObservationLogRequest.FromString,
                    response_serializer=api__pb2.GetObservationLogReply.SerializeToString,
            ),
            'DeleteObservationLog': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteObservationLog,
                    request_deserializer=api__pb2.DeleteObservationLogRequest.FromString,
                    response_serializer=api__pb2.DeleteObservationLogReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1alpha1.manager.Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReportObservationLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1alpha1.manager.Manager/ReportObservationLog',
            api__pb2.ReportObservationLogRequest.SerializeToString,
            api__pb2.ReportObservationLogReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObservationLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1alpha1.manager.Manager/GetObservationLog',
            api__pb2.GetObservationLogRequest.SerializeToString,
            api__pb2.GetObservationLogReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteObservationLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1alpha1.manager.Manager/DeleteObservationLog',
            api__pb2.DeleteObservationLogRequest.SerializeToString,
            api__pb2.DeleteObservationLogReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SuggestionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSuggestions = channel.unary_unary(
                '/api.v1alpha1.manager.Suggestion/GetSuggestions',
                request_serializer=api__pb2.GetSuggestionsRequest.SerializeToString,
                response_deserializer=api__pb2.GetSuggestionsReply.FromString,
                )
        self.ValidateAlgorithmSettings = channel.unary_unary(
                '/api.v1alpha1.manager.Suggestion/ValidateAlgorithmSettings',
                request_serializer=api__pb2.ValidateAlgorithmSettingsRequest.SerializeToString,
                response_deserializer=api__pb2.ValidateAlgorithmSettingsReply.FromString,
                )


class SuggestionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSuggestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateAlgorithmSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SuggestionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestions,
                    request_deserializer=api__pb2.GetSuggestionsRequest.FromString,
                    response_serializer=api__pb2.GetSuggestionsReply.SerializeToString,
            ),
            'ValidateAlgorithmSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateAlgorithmSettings,
                    request_deserializer=api__pb2.ValidateAlgorithmSettingsRequest.FromString,
                    response_serializer=api__pb2.ValidateAlgorithmSettingsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1alpha1.manager.Suggestion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Suggestion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1alpha1.manager.Suggestion/GetSuggestions',
            api__pb2.GetSuggestionsRequest.SerializeToString,
            api__pb2.GetSuggestionsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateAlgorithmSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1alpha1.manager.Suggestion/ValidateAlgorithmSettings',
            api__pb2.ValidateAlgorithmSettingsRequest.SerializeToString,
            api__pb2.ValidateAlgorithmSettingsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EarlyStoppingStub(object):
    """TODO: This feature is not yet fully implemented.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class EarlyStoppingServicer(object):
    """TODO: This feature is not yet fully implemented.
    """


def add_EarlyStoppingServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1alpha1.manager.EarlyStopping', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EarlyStopping(object):
    """TODO: This feature is not yet fully implemented.
    """
